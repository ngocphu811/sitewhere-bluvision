<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:sw="http://www.sitewhere.com/schema/sitewhere/ce"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
           http://www.sitewhere.com/schema/sitewhere/ce http://www.sitewhere.org/schema/sitewhere/ce/1.0.3/sitewhere.xsd?a=a96">
           
	<!-- Load property values for substitution -->
	<context:property-placeholder location="file:${catalina.home}/conf/sitewhere/sitewhere.properties"
		ignore-resource-not-found="true"/>
	
	<!-- ########################### -->
	<!-- # SITEWHERE CONFIGURATION # -->
	<!-- ########################### -->
	<sw:configuration>

		<!-- ################################# -->
		<!-- # GLOBAL SERVICES CONFIGURATION # -->
		<!-- ################################# -->
		<sw:globals>
			<sw:hazelcast-configuration configFileLocation="${catalina.home}/conf/sitewhere/hazelcast.xml"/>
			<sw:groovy-configuration debug="true" verbose="true"/>
		</sw:globals>
		
		<!-- ########################### -->
		<!-- # DATASTORE CONFIGURATION # -->
		<!-- ########################### -->
		<sw:datastore>
		
			<!-- Default MongoDB Datastore -->
			<sw:mongo-datastore hostname="localhost" port="27017" databaseName="sitewhere"/>
		
			<!-- Default HBase Datastore -->
			<!--  
			<sw:hbase-datastore quorum="sandbox.hortonworks.com" zookeeperZnodeParent="/hbase-unsecure"/>
			-->
			
			<!-- Improves performance by using Hazelcast for distributed caching -->
			<sw:hazelcast-cache/>
			
			<!-- Initializes device model with sample data if datastore is empty -->
			<sw:default-device-model-initializer/>
			
			<!-- Initializes user model with sample data if datastore is empty -->
			<sw:default-user-model-initializer/>

		</sw:datastore>
		
		<!-- ######################## -->
		<!-- # DEVICE COMMUNICATION # -->
		<!-- ######################## -->
		<sw:device-communication>
		
			<!-- Inbound event sources -->
			<sw:event-sources>

				<!-- Event source for protobuf messages over MQTT -->
				<sw:mqtt-event-source sourceId="protobuf" hostname="localhost"
					port="1883" topic="SiteWhere/input/protobuf">
					<sw:protobuf-event-decoder/>
				</sw:mqtt-event-source>

				<!-- WebSocket connection to BluZone portal -->
				<sw:web-socket-event-source sourceId="websocket"
					webSocketUrl="wss://beta.bluzone.io/portal/consumer/raw" payloadType="string">
					<sw:groovy-string-event-decoder scriptPath="bluzone.groovy"/>
					<sw:header name="BZID" value="WpGToKtlv9g8hEE9LxDh8Ao4sbM8KbZmT3eJxwKounEnd0saWw"/>
				</sw:web-socket-event-source>

			</sw:event-sources>
		
			<!-- Inbound Processing Strategy -->
			<sw:inbound-processing-strategy>
				<sw:default-inbound-processing-strategy
					numEventProcessorThreads="50" enableMonitoring="false" monitoringIntervalSec="3"/>
			</sw:inbound-processing-strategy>
			
			<!-- Device registration -->
			<sw:registration>
				<sw:default-registration-manager allowNewDevices="true"/>
			</sw:registration>
			
			<!-- Batch operation management -->
			<sw:batch-operations>
				<sw:default-batch-operation-manager
					throttleDelayMs="10000"/>
			</sw:batch-operations>
			
			<!-- Device command routing -->
			<sw:command-routing>
				<sw:specification-mapping-router defaultDestination="default">
					<sw:mapping specification="d2604433-e4eb-419b-97c7-88efe9b2cd41"
						destination="android"/>
				</sw:specification-mapping-router>
			</sw:command-routing>
			
			<!-- Outbound command destinations -->
			<sw:command-destinations>

				<!-- Delivers commands via MQTT -->
				<sw:mqtt-command-destination destinationId="default"
					hostname="localhost" port="1883">
					<sw:protobuf-command-encoder/>
					<sw:hardware-id-topic-extractor commandTopicExpr="SiteWhere/commands/%s"
						systemTopicExpr="SiteWhere/system/%s"/>
				</sw:mqtt-command-destination>

				<!-- Delivers commands via MQTT -->
				<sw:mqtt-command-destination destinationId="android"
					hostname="localhost" port="1883">
					<sw:java-protobuf-hybrid-encoder/>
					<sw:hardware-id-topic-extractor commandTopicExpr="SiteWhere/commands/%s"
						systemTopicExpr="SiteWhere/system/%s"/>
				</sw:mqtt-command-destination>

			</sw:command-destinations>

		</sw:device-communication>
		
		<!-- ############################ -->
		<!-- # INBOUND PROCESSING CHAIN # -->
		<!-- ############################ -->
		<sw:inbound-processing-chain>
			
			<!-- Store events -->
			<sw:event-storage-processor/>
			
			<!-- Allow devices to dynamically register -->
			<sw:registration-processor/>
			
			<!-- Allow devices to create streams and send stream data -->
			<sw:device-stream-processor/>

		</sw:inbound-processing-chain>
		
		<!-- ############################# -->
		<!-- # OUTBOUND PROCESSING CHAIN # -->
		<!-- ############################# -->
		<sw:outbound-processing-chain>
		
			<!-- Routes commands for outbound processing -->
			<sw:command-delivery-event-processor/>
			
			<!-- Performs zone checking for locations -->
			<!-- 
			<sw:zone-test-event-processor>
				<sw:zone-test zoneToken="777fa4e5-bc2f-458b-9968-b598b2e2d2ca" condition="outside"
					alertLevel="error" alertType="off.site" alertMessage="Asset has left the worksite."/>
			</sw:zone-test-event-processor>
			 -->
			
			<!-- Send outbound device events over Hazelcast -->
			<sw:hazelcast-event-processor/>

			<!-- Processes event streams using Siddhi for complex event processing -->
			<!-- 
			<sw:siddhi-event-processor>
			
				<sw:siddhi-query
					selector="from e1 = MeasurementStream[mxname == 'engine.temp'], e2 = MeasurementStream[mxname == 'engine.temp' and e1.assignment == assignment and ((e2.mxvalue - e1.mxvalue) > 5)] select e1.assignment insert into EngineTempRose">
					<sw:stream-debugger stream="EngineTempRose"/>
				</sw:siddhi-query>
				
				<sw:siddhi-query
					selector="from e1 = LocationStream, e2 = LocationStream[(latitude != e1.latitude or longitude != e1.longitude) and e1.assignment == assignment] select e2.assignment, e2.latitude, e2.longitude insert into LocationChanged">
					<sw:stream-debugger stream="LocationChanged"/>
				</sw:siddhi-query>
				
				<sw:siddhi-query
					selector="from every e1 = AlertStream[type == 'low.bp'] -> e2 = AlertStream[type == 'g.shock' and e1.assignment == assignment] within 7 sec select e1.assignment insert into Fainted">
					<sw:groovy-stream-processor scriptPath="siddhiEventProcessor.groovy"
						stream="Fainted"/>
				</sw:siddhi-query>

			</sw:siddhi-event-processor>
			-->

		</sw:outbound-processing-chain>
		
		<!-- #################### -->
		<!-- # ASSET MANAGEMENT # -->
		<!-- #################### -->
		<sw:asset-management>

			<sw:filesystem-device-asset-module/>
			<sw:filesystem-hardware-asset-module/>
			<sw:filesystem-person-asset-module/>
			<sw:filesystem-location-asset-module/>

		</sw:asset-management>

	</sw:configuration>

</beans>